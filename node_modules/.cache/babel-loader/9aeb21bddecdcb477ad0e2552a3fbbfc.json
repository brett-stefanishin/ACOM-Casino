{"ast":null,"code":"import _classCallCheck from \"/Users/BrettHarvey/Documents/Software/ACOM/roulette/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/BrettHarvey/Documents/Software/ACOM/roulette/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/BrettHarvey/Documents/Software/ACOM/roulette/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/BrettHarvey/Documents/Software/ACOM/roulette/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/BrettHarvey/Documents/Software/ACOM/roulette/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/BrettHarvey/Documents/Software/ACOM/roulette/src/components/BettingPanel/BettingPanel.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport BalancePanel from './BalancePanel/BalancePanel';\nimport classes from './BettingPanel.module.css';\n\nvar BettingPanel = /*#__PURE__*/function (_Component) {\n  _inherits(BettingPanel, _Component);\n\n  var _super = _createSuper(BettingPanel);\n\n  function BettingPanel() {\n    var _this;\n\n    _classCallCheck(this, BettingPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      bet: 0,\n      balance: 10000,\n      error: \"\"\n    };\n\n    _this.handleChange = function (event) {\n      if (event.target.value > _this.state.balance) {\n        _this.setState({\n          error: \"You cannot bet more than your balance.\"\n        });\n      } else if (event.target.value <= 0) {\n        _this.setState({\n          error: \"You cannot bet less than 0.\"\n        });\n      } else {\n        _this.setState({\n          bet: event.target.value,\n          error: \"\"\n        });\n      }\n    };\n\n    _this.getWinningColour = function (win) {\n      var out;\n\n      if (win % 2 === 0 && win !== 0) {\n        out = 'red';\n      } else if (win % 2 === 1) {\n        out = 'black';\n      } else if (win === 0) {\n        out = \"green\";\n      }\n\n      return out;\n    };\n\n    _this.betHandler = function (colour, result) {\n      var mult = null;\n      var old_balance = _this.state.balance;\n\n      _this.setState({\n        balance: old_balance - _this.state.bet\n      });\n\n      var winning_colour = _this.getWinningColour(parseInt(result));\n\n      if (winning_colour === 'black' || winning_colour === 'red') {\n        mult = 2;\n      } else {\n        mult = 14;\n      }\n\n      setTimeout(function () {\n        if (colour === winning_colour) {\n          var current_balance = _this.state.balance;\n          var current_bet = _this.state.bet;\n          var newBalance = current_balance += current_bet * mult;\n\n          _this.setState({\n            balance: newBalance\n          });\n        }\n      }, 8500);\n    };\n\n    _this.clickHandle = function (colour) {\n      if (_this.state.error === \"\") {\n        var result = _this.props.spin();\n\n        _this.betHandler(colour, result);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(BettingPanel, [{\n    key: \"render\",\n    value: function render() {\n      var error = null;\n\n      if (this.state.error) {\n        error = /*#__PURE__*/React.createElement(\"p\", {\n          className: classes.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }\n        }, this.state.error);\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.bettingPanel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }, this.props.title), /*#__PURE__*/React.createElement(BalancePanel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }, \" \", window.web3.utils.fromWei(this.props.acomTokenBalance, \"Ether\"), \" \", \" ACOM\"), /*#__PURE__*/React.createElement(\"input\", {\n        className: classes.betInput,\n        type: \"number\",\n        placeholder: \"Bet...\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }), error, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.betButtons,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: classes.red,\n        style: this.props.btn_dis_style,\n        disabled: this.props.disabledBool,\n        onClick: this.clickHandle.bind(this, 'red'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, \"Bet Red (X2)\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: classes.green,\n        style: this.props.btn_dis_style,\n        disabled: this.props.disabledBool,\n        onClick: this.clickHandle.bind(this, 'green'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }\n      }, \"Bet Green (X14)\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: classes.black,\n        style: this.props.btn_dis_style,\n        disabled: this.props.disabledBool,\n        onClick: this.clickHandle.bind(this, 'black'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }, \"Bet Black (X2)\")));\n    }\n  }]);\n\n  return BettingPanel;\n}(Component);\n\nexport default BettingPanel;","map":{"version":3,"sources":["/Users/BrettHarvey/Documents/Software/ACOM/roulette/src/components/BettingPanel/BettingPanel.js"],"names":["React","Component","BalancePanel","classes","BettingPanel","state","bet","balance","error","handleChange","event","target","value","setState","getWinningColour","win","out","betHandler","colour","result","mult","old_balance","winning_colour","parseInt","setTimeout","current_balance","current_bet","newBalance","clickHandle","props","spin","bettingPanel","title","window","web3","utils","fromWei","acomTokenBalance","betInput","betButtons","red","btn_dis_style","disabledBool","bind","green","black"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport BalancePanel from './BalancePanel/BalancePanel'\nimport classes from './BettingPanel.module.css';\n\nclass BettingPanel extends Component {\n    state = {\n        bet: 0,\n        balance: 10000,\n        error: \"\"\n    }\n    /**\n     * Used to handle the click event for betting buttons\n     * \n     * @param {eventObject} event - Click event object\n     */\n    handleChange = (event) => {\n        if(event.target.value > this.state.balance){\n            this.setState({error: \"You cannot bet more than your balance.\"})\n        } else if(event.target.value <= 0){\n            this.setState({ error: \"You cannot bet less than 0.\" })\n        } else{\n            this.setState({ bet: event.target.value, error: \"\" })\n        }\n    }\n    /**\n     * Object used to get the winning colour from a number\n     * \n     * @param {integer} win - The winning number of the spin\n     * @return {string} - The string of the winning colour ('red', 'green' or 'black')\n     */\n    getWinningColour = (win) => {\n        let out;\n        if(win % 2 === 0 && win !== 0){\n            out = 'red';\n        } else if(win % 2 === 1){\n            out = 'black';\n        } else if (win === 0){\n            out = \"green\";\n        }\n        return out\n    }\n    /**\n     * Used to handle a bet\n     * \n     * @param {string} colour - The winning colour usually from getWinningColour()\n     * @param {integer} result - The integer result of the spin\n     */\n    betHandler = (colour, result) => {\n        let mult = null;\n        let old_balance = this.state.balance;\n        this.setState({balance: old_balance - this.state.bet})\n        let winning_colour = this.getWinningColour(parseInt(result));\n        if (winning_colour === 'black' || winning_colour === 'red'){\n            mult = 2;\n        } else{\n            mult = 14;\n        }\n        setTimeout(() => {\n            if (colour === winning_colour) {\n                let current_balance = this.state.balance;\n                let current_bet = this.state.bet;\n                let newBalance = current_balance += (current_bet * mult);\n                this.setState({ balance: newBalance })\n            }\n        }, 8500)\n\n    }\n    /**\n     * Function used to combine the betHandler and the spin functions on a click of the betting buttons\n     * \n     * @param {string} colour - Colour chosen by the user\n     */\n    clickHandle = (colour) => {\n        if (this.state.error === \"\") {\n            let result = this.props.spin();\n            this.betHandler(colour, result);\n        }\n\n    }\n    render() {\n        let error = null;\n        if(this.state.error){\n            error = (\n                <p className={classes.error}>{this.state.error}</p>\n            )\n        }\n        return (\n            <div className={classes.bettingPanel}>\n                <h1>{this.props.title}</h1>\n                <BalancePanel> {window.web3.utils.fromWei(this.props.acomTokenBalance,\"Ether\"  )}{\" \"} ACOM</BalancePanel>\n                <input className={classes.betInput} type=\"number\" placeholder=\"Bet...\" onChange={this.handleChange} />\n                {error}\n                <div className={classes.betButtons}>\n                    <button className={classes.red} style={this.props.btn_dis_style} disabled={this.props.disabledBool} onClick={this.clickHandle.bind(this, 'red')}>Bet Red (X2)</button>\n                    <button className={classes.green} style={this.props.btn_dis_style} disabled={this.props.disabledBool} onClick={this.clickHandle.bind(this, 'green')}>Bet Green (X14)</button>\n                    <button className={classes.black} style={this.props.btn_dis_style} disabled={this.props.disabledBool} onClick={this.clickHandle.bind(this, 'black')}>Bet Black (X2)</button>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default BettingPanel\n"]},"metadata":{},"sourceType":"module"}